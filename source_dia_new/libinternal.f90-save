!=============================================================================
subroutine buildWBmat(natom,ncoords,cgeom,igeom,Bmat)
  use pip
  use hddata
  implicit none
  integer, intent(in) :: natom, ncoords
  real*8, intent(in) :: cgeom(3*natom)
  real*8, intent(out) :: igeom(ncoords)
  real*8, intent(out) :: Bmat(ncoords,3*natoms)
  integer :: i, cc

  real*8 :: dcoord(12)
  real*8 :: ccoord
  
  
  !PIP
  call evaluatepip(cgeom,igeom(1:npip),Bmat(1:npip,:))

  ! User defined coordinates from coord.input file.
  do i = 1, noopc
     call evaluateoopcoord(i, natom, cgeom, ccoord, dcoord)
     igeom((ncoord-noopc) + i) = ccoord
     Bmat((ncoord-noopc) + i,:) = dcoord
  end do

  return
end subroutine buildWBmat
!=============================================================================
! evaluateoopcoord: evaluate user defined oop coordinates
! Input:
!  n     = coordinate number
!  natm  = number of atoms
!  cgeom = geometry
! Output:
!  val   = value of coordinate
!  dval  = derivative of coordinate
! This is a recursive subroutine to evaluate product coordinates.
recursive subroutine evaluateoopcoord(n, natm, cg, val, dval)
  use hddata
  implicit none
  integer, intent(in) :: n, natm
  double precision, intent(in)  :: cg(natm*3)
  double precision, intent(out) :: val, dval(natm*3)

  double precision :: v, dv(natm*3)
  double precision :: v1, dv1(natm*3), v2, dv2(natm*3)
  integer :: a1, a2, a3, a4
  integer :: c(2)
  integer :: i

  val  = 0d0
  dval = 0d0

  select case(coord(n)%ctype)

  case(-2)

     ! Umbrella OOP coordinate
     do i = 1, coord(n)%nperm
        a1 = coord(n)%alist(1,i)
        a2 = coord(n)%alist(2,i)
        a3 = coord(n)%alist(3,i)
        a4 = coord(n)%alist(4,i)
        call OOP(cg(a1*3-2:a1*3), cg(a2*3-2:a2*3), cg(a3*3-2:a3*3), &
             cg(a4*3-2:a4*3), val, dval, 1)
        val = val + v
        dval = dval + dv
     end do
     val = val / coord(n)%nperm
     dval=dval / coord(n)%nperm
     
  case(-3)

     ! Four-center dot product
     do i = 1, coord(n)%nperm
        a1 = coord(n)%alist(1,i)
        a2 = coord(n)%alist(2,i)
        a3 = coord(n)%alist(3,i)
        a4 = coord(n)%alist(4,i)
        call FCDP(cg(a1*3-2:a1*3), cg(a2*3-2:a2*3), cg(a3*3-2:a3*3), &
             cg(a4*3-2:a4*3), v, dv, 1)
        val  = val  + v
        dval = dval + dv
     end do
     val  = val  / coord(n)%nperm
     dval = dval / coord(n)%nperm

  case(-4)
     
     ! Product coordinate
     ! Set products
     c(1) = coord(n)%alist(1,1)
     c(2) = coord(n)%alist(1,2)

     ! Evaluate first coordinate
     call evaluateoopcoord(c(1), natm, cg, v1, dv1)
     ! Evaluate second coordinate
     call evaluateoopcoord(c(2), natm, cg, v2, dv2)

     val = v1 * v2
     dval = v1 * dv2(:) + v2 * dv1(:)
     
  case default
     stop "Coordinate type not defined!"
  end select
     
  return
end subroutine evaluateoopcoord
!=============================================================================
function triple_product(a,b,c)
  implicit none
  real*8 :: triple_product
  real*8, intent(in) :: a(3),b(3),c(3)
  triple_product = a(1)*b(2)*c(3) - a(1)*b(3)*c(2) - a(2)*b(1)*c(3) + &
                   a(2)*b(3)*c(1) + a(3)*b(1)*c(2) - a(3)*b(2)*c(1)
  return
end
!=============================================================================
subroutine OOP(a,b,c,d,coord,dcoord,id)
  implicit none
  real*8, intent(in) :: a(3),b(3),c(3),d(3)
  integer, intent(in) :: id
  real*8, intent(out) :: coord, dcoord(12)
  real*8, external :: triple_product
  real*8 :: ab(3), ac(3), ad(3), rab, rac, rad
  real*8 :: abx(12),acx(12),adx(12),dtp(12)

  ab=a-b
  ac=a-c
  ad=a-d
  rab=sqrt(dot_product(ab,ab))
  rac=sqrt(dot_product(ac,ac))
  rad=sqrt(dot_product(ad,ad))
  coord=triple_product(ab,ac,ad)/(rab*rac*rad)

  if(id.ne.0) then
    abx=0.d0
    abx(1:3)=ab/rab
    abx(4:6)=-abx(1:3)
    acx=0.d0
    acx(1:3)=ac/rac
    acx(7:9)=-acx(1:3)
    adx=0.d0
    adx(1:3)=ad/rad
    adx(10:12)=-adx(1:3)
    !tp = ab(1)*ac(2)*ad(3) - ab(1)*ac(3)*ad(2) - ab(2)*ac(1)*ad(3) + &
    !     ab(2)*ac(3)*ad(1) + ab(3)*ac(1)*ad(2) - ab(3)*ac(2)*ad(1)
    dtp(1)=ac(2)*ad(3)-ac(3)*ad(2)-ab(2)*ad(3)+ab(2)*ac(3)+ab(3)*ad(2)-ab(3)*ac(2)
    dtp(2)=ab(1)*ad(3)-ab(1)*ac(3)-ac(1)*ad(3)+ac(3)*ad(1)+ab(3)*ac(1)-ab(3)*ad(1)
    dtp(3)=ab(1)*ac(2)-ab(1)*ad(2)-ab(2)*ac(1)+ab(2)*ad(1)+ac(1)*ad(2)-ac(2)*ad(1)
    dtp(4)=-ac(2)*ad(3)+ac(3)*ad(2)
    dtp(5)=ac(1)*ad(3)-ac(3)*ad(1)
    dtp(6)=-ac(1)*ad(2)+ac(2)*ad(1)
    dtp(7)=ab(2)*ad(3)-ab(3)*ad(2)
    dtp(8)=-ab(1)*ad(3)+ab(3)*ad(1)
    dtp(9)=ab(1)*ad(2)-ab(2)*ad(1)
    dtp(10)=-ab(2)*ac(3)+ab(3)*ac(2)
    dtp(11)=ab(1)*ac(3)-ab(3)*ac(1)
    dtp(12)=-ab(1)*ac(2)+ab(2)*ac(1)
    dcoord=dtp/(rab*rac*rad)-coord*(abx/rab+acx/rac+adx/rad)
  end if

  return
end
!===============================================================================
! FCDP: compute four-center dot product:
!        f = (a1-a2).(a3-a4) / norm(a1-a2) / norm(a3-a4)
subroutine FCDP(a1,a2,a3,a4,coord,dcoord,id)
  implicit none
  real*8, dimension(3), intent(in) :: a1, a2, a3, a4
  integer,              intent(in) :: id
  real*8, dimension(12),intent(out):: dcoord
  real*8,               intent(out):: coord
  
  real*8, dimension(3) :: d12, d34 ! distance vectors: 1-2, 3-4                   
  real*8               :: r12, r34 ! distances:  1-2, 3-4                         
  real*8               :: f ! dot product                                         
  real*8, dimension(12):: dp ! gradients of f             

  dp = 0d0
  dcoord = 0d0
  coord = 0d0
  
  d12 = a1-a2
  d34 = a3-a4
  r12 = sqrt(dot_product(d12,d12))
  if (abs(r12)<1D-30) r12=sign(1D-30,r12)
  r34 = sqrt(dot_product(d34,d34))
  if (abs(r34)<1D-30) r34=sign(1D-30,r34)
  f = dot_product(d12,d34)
  coord = f / r12 / r34
  
  !dp = d12(1)*d34(1)+d12(2)*d34(2)+d12(3)*d34(3)                                 
  if (id .ne. 0) then
          dp(1)  = d34(1)/r12/r34 - f/r12*d12(1)/r12/r34/r12
          dp(2)  = d34(2)/r12/r34 - f/r12*d12(2)/r12/r34/r12
          dp(3)  = d34(3)/r12/r34 - f/r12*d12(3)/r12/r34/r12
          dp(4)  =-d34(1)/r12/r34 + f/r12*d12(1)/r12/r34/r12
          dp(5)  =-d34(2)/r12/r34 + f/r12*d12(2)/r12/r34/r12
          dp(6)  =-d34(3)/r12/r34 + f/r12*d12(3)/r12/r34/r12
          dp(7)  = d12(1)/r34/r12 - f/r34*d34(1)/r34/r12/r34
          dp(8)  = d12(2)/r34/r12 - f/r34*d34(2)/r34/r12/r34
          dp(9)  = d12(3)/r34/r12 - f/r34*d34(3)/r34/r12/r34
          dp(10) =-d12(1)/r34/r12 + f/r34*d34(1)/r34/r12/r34
          dp(11) =-d12(2)/r34/r12 + f/r34*d34(2)/r34/r12/r34
          dp(12) =-d12(3)/r34/r12 + f/r34*d34(3)/r34/r12/r34
  end if
  dcoord = dp
  
  return
end subroutine FCDP
!===============================================================================
